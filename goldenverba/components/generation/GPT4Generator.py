import os
import asyncio

from goldenverba.components.generation.interface import Generator


class GPT4Generator(Generator):
    """
    GPT4 Generator
    """

    def __init__(self):
        super().__init__()
        self.name = "GPT4Generator"
        self.description = "Generator using OpenAI's GPT4 model"
        self.requires_library = ["openai"]
        self.requires_env = ["OPENAI_API_KEY"]
        self.streamable = False

    async def generate(
        self,
        queries: list[str],
        context: list[str],
        conversation: dict = {},
    ) -> str:
        """Generate an answer based on a list of queries and list of contexts, include conversational context
        @parameter: queries : list[str] - List of queries
        @parameter: context : list[str] - List of contexts
        @parameter: conversation : dict - Conversational context
        @returns str - Answer generated by the Generator
        """

        messages = self.prepare_messages(queries, context, conversation)

        try:
            import openai

            openai.api_key = os.getenv("OPENAI_API_KEY")

            completion = await asyncio.to_thread(
                openai.ChatCompletion.create, model="gpt-4", messages=messages
            )
            system_msg = str(completion["choices"][0]["message"]["content"])

        except Exception as e:
            print(e)
            raise e

        return system_msg

    def generate_stream(
        self,
        queries: list[str],
        context: list[str],
        conversation: dict = {},
    ) -> str:
        """Generate an answer based on a list of queries and list of contexts, include conversational context
        @parameter: queries : list[str] - List of queries
        @parameter: context : list[str] - List of contexts
        @parameter: conversation : dict - Conversational context
        @returns str - Answer generated by the Generator
        """

        messages = self.prepare_messages(queries, context, conversation)

        try:
            import openai

            openai.api_key = os.getenv("OPENAI_API_KEY")

            completion = openai.ChatCompletion.create(
                model="gpt-4", messages=messages, stream=True
            )

            for chunk in completion:
                yield {
                    "message": chunk["choices"][0]["delta"]["content"],
                    "finish_reason": chunk["choices"][0]["finish_reason"],
                }

        except Exception as e:
            print(e)
            raise e

    def prepare_messages(self, queries, context, conversation):
        messages = [
            {
                "role": "system",
                "content": f"You are a Retrieval Augmented Generation chatbot. Please answer user queries only their provided context. If the provided documentation does not provide enough information, say so. If the answer requires code examples encapsulate them with ```programming-language-name ```. Don't do pseudo-code.",
            }
        ]

        for message in conversation:
            messages.append({"role": message.type, "content": message.content})

        query = " ".join(queries)
        user_context = " ".join(context)

        messages.append(
            {
                "role": "user",
                "content": f"Please answer this query: '{query}' with this provided context: {user_context}",
            }
        )

        return messages
