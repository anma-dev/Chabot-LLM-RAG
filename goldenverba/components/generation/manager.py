from goldenverba.components.retriever.WindowRetriever import WindowRetriever
from goldenverba.components.retriever.SimpleRetriever import SimpleRetriever
from goldenverba.components.retriever.interface import Retriever
from goldenverba.components.chunking.chunk import Chunk
from goldenverba.components.embedding.interface import Embedder
from goldenverba.components.retriever.interface import Retriever
from goldenverba.components.generation.interface import Generator
from goldenverba.components.generation.GPT4Generator import GPT4Generator

from weaviate import Client


from wasabi import msg


class GeneratorManager:
    def __init__(self):
        self.generators: dict[str, Generator] = {
            "GPT4Generator": GPT4Generator(),
            "GPTFourGenerator": GPT4Generator(),
        }
        self.selected_generator: Generator = self.generators["GPT4Generator"]

    async def generate(
        self,
        queries: list[str],
        context: list[str],
        conversation: dict = {},
    ) -> str:
        """Generate an answer based on a list of queries and list of contexts, include conversational context
        @parameter: queries : list[str] - List of queries
        @parameter: context : list[str] - List of contexts
        @parameter: conversation : dict - Conversational context
        @returns str - Answer generated by the Generator
        """
        return await self.selected_generator.generate(queries, context, conversation)

    def generate_stream(
        self,
        queries: list[str],
        context: list[str],
        conversation: dict = {},
    ) -> str:
        """Generate an answer based on a list of queries and list of contexts, include conversational context
        @parameter: queries : list[str] - List of queries
        @parameter: context : list[str] - List of contexts
        @parameter: conversation : dict - Conversational context
        @returns str - Answer generated by the Generator
        """
        return self.selected_generator.generate_stream(queries, context, conversation)

    def set_generator(self, generator: str) -> bool:
        if generator in self.generators:
            self.selected_generator = self.generators[generator]
            return True
        else:
            msg.warn(f"Generator {generator} not found")
            return False

    def get_generators(self) -> dict[str, Generator]:
        return self.generators
